# -*- coding: utf-8 -*-
"""Gộp_DATA GENSHIN.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1G3nxSUYbHPAX-lhT4rzIinjV5FFfae7E
"""

pip install pandas

import pandas as pd

url = 'https://docs.google.com/spreadsheets/d/1ajCkZB1C1fGvYSRRKqZ8JT_MHth5c_8w/edit?usp=drive_link&ouid=111930618054542411595&rtpof=true&sd=true'
url = 'https://drive.google.com/uc?id=' + url.split('/')[-2]
df_GENSHIN = pd.read_excel(url)
df_GENSHIN.head(10)

"""# Mục mới

#**CLEAR DATA**
"""

df_GENSHIN.info()

#XÓA CỘT LIMITED
df_GENSHIN.drop('LIMITED', axis=1, inplace=True)

# Thay thế dữ liệu NA bằng giá trị 'unknown'
df_GENSHIN['REGION'].fillna('Unknown', inplace=True)
df_GENSHIN

# TÁCH CỘT MODEL THÀNH SEX VÀ MODEL
df_GENSHIN[['SEX','MODEL']] = df_GENSHIN['MODEL'].str.split(' ', expand = True)
df_GENSHIN.head(10)

#DI CHUYỂN CỘT SEX TRƯỚC CỘT MODEL
#column_to_move = df_GENSHIN.pop("SEX")
df_GENSHIN.insert(5, "SEX", df_GENSHIN.pop("SEX"))
df_GENSHIN.head(10)
df_GENSHIN.to_excel('GENSHIN_FIXED.xlsx') #Tạo thành dataframe mới, dưới dây đều dùng nó

"""# **Thống kê mô tả GENSHIN_DATA**"""

url = 'https://docs.google.com/spreadsheets/d/1H9UT0x4AQ9dwMtIcYO9C0VaOE17YUOWd/edit?usp=sharing&ouid=111930618054542411595&rtpof=true&sd=true'
url = 'https://drive.google.com/uc?id=' + url.split('/')[-2]
df_GENSHIN = pd.read_excel(url)
df_GENSHIN.head(10)

#Thống kê mô tả các biến định lượng trong dataframe
df_GENSHIN.describe()

#Lọc ra nhân vật có HP mạnh nhất
df_GENSHIN_HP = df_GENSHIN.loc[df_GENSHIN["HP_90_90"] == df_GENSHIN["HP_90_90"].max()]
df_GENSHIN_HP

#Lọc ra nhân vật có ATK mạnh nhất
df_GENSHIN_ATK = df_GENSHIN.loc[df_GENSHIN["ATK_90_90"] == df_GENSHIN["ATK_90_90"].max()]
df_GENSHIN_ATK

#lọc ra nhân vật có DEF (phòng ngự) mạnh nhất
df_GENSHIN_DEF = df_GENSHIN.loc[df_GENSHIN["DEF_90_90"] == df_GENSHIN["DEF_90_90"].max()]
df_GENSHIN_DEF

#Lọc ra nhân vật có mức độ sử dụng nhiều nhất
df_GENSHIN_USE = df_GENSHIN.loc[df_GENSHIN["LEVEL OF USE"] == df_GENSHIN["LEVEL OF USE"].max()]
df_GENSHIN_USE

#Nhân vật có mức độ sử dụng ít nhất
df_GENSHIN_USE = df_GENSHIN.loc[df_GENSHIN["LEVEL OF USE"] == df_GENSHIN["LEVEL OF USE"].min()]
df_GENSHIN_USE

#Lọc ra nhân vật được yêu thích nhất
df_GENSHIN_LOVE = df_GENSHIN.loc[df_GENSHIN["LEVEL OF LOVE"] == df_GENSHIN["LEVEL OF LOVE"].max()]
df_GENSHIN_LOVE

#Lọc ra nhân vật ít được yêu thích nhất
df_GENSHIN_LOVE = df_GENSHIN.loc[df_GENSHIN["LEVEL OF LOVE"] == df_GENSHIN["LEVEL OF LOVE"].min()]
df_GENSHIN_LOVE

"""#**GROUPBY**"""

#GIỮA CỘT REGION - VISION, SEX, WEAPON_TYPE
df_GENSHIN_REGION_VSW = df_GENSHIN.groupby(['REGION'])[['VISION', 'WEAPON_TYPE', "SEX"]]
df_GENSHIN_REGION_VSW.describe()

df1 = df_GENSHIN.groupby(['VISION'])[["SEX"]]
df1.value_counts()

df_GENSHIN_REGION_VSW = df_GENSHIN.groupby(['REGION'])[['VISION']]
df_GENSHIN_REGION_VSW.value_counts()

df1 = df_GENSHIN.groupby('SEX')['MODEL']
df1.value_counts()

df_GENSHIN_WS = df_GENSHIN.groupby(['SEX'])['WEAPON_TYPE']
df_GENSHIN_WS.value_counts()

"""# **Vẽ Đồ thị tương tác thông qua việc liên kết với bokeh**"""

import bokeh.io
import bokeh.plotting

bokeh.io.output_notebook()

from bokeh.plotting import figure, show
from matplotlib import pyplot as plt

numerical_variables = df_GENSHIN.select_dtypes(exclude='object')

#Tạo ma trận tương quan
import seaborn as sns

MTTQ = numerical_variables.corr()

sns.heatmap(MTTQ, annot=True,linewidths=30 )
plt.title('Ma trận tương quan giữa các biến ĐỊNH LƯỢNG')
plt.show()

sns.pairplot(df_GENSHIN)

from bokeh.io import output_file, show # dùng để chỉ định tên file HTML mà đồ thị sẽ được lưu vào khi xuất. Hàm show dùng để hiển thị đồ thị trong trình duyệt web hoặc lưu nó vào file
from bokeh.models import ColumnDataSource, FactorRange # Câu lệnh này nhập ColumnDataSource, một đối tượng cung cấp dữ liệu cho các glyphs trong Bokeh, và FactorRange, dùng để tạo ra phạm vi cho các biến phân loại (categorical variables) trên trục đồ thị.
from bokeh.transform import factor_cmap #bảng màu
from bokeh.layouts import row #Hàm này cho phép bạn sắp xếp các đối tượng đồ thị (plots) hoặc các widget cạnh nhau theo chiều ngang trong một hàng.
from bokeh.models.tools import HoverTool  #HoverTool được thêm vào để khi di chuột qua các cột, bạn sẽ thấy thông tin chi tiết về cột đó
# Dữ liệu
visions = ["Anemo", "Cryo", "Dendro", "Electro", "Geo", "Hydro", "Pyro"]
sexs = ["Female", "Male"]
factors = [(vision, sex) for vision in visions for sex in sexs ]

counts = [5, 5, 10, 5, 4, 4, 9, 2, 4, 3, 7, 4, 8, 4]


source = ColumnDataSource(data=dict(factors=factors, counts=counts))

p = figure(title="HÌNH 1: ĐỒ THỊ GIỚI TÍNH THEO NGUYÊN TỐ Ở MONSTALT", x_range=FactorRange(*factors),toolbar_location= "right")

p.vbar(x='factors', top='counts', width=0.9, source=source,
       line_color="white",
       fill_color=factor_cmap('factors', palette=["pink", "blue"], factors=sexs, start=1, end=2))

p.add_tools(HoverTool(tooltips=[("Vision, Sex", "@factors"), ("Count", "@counts")]))

p.y_range.start = 0
p.x_range.range_padding = 0.1 #Khoảng cách giữa đồ thị và trục tung
p.xaxis.major_label_orientation = 1 #độ nghiên của nhãn ở trục x "female và male"

show(p)

from bokeh.io import output_file, show # dùng để chỉ định tên file HTML mà đồ thị sẽ được lưu vào khi xuất. Hàm show dùng để hiển thị đồ thị trong trình duyệt web hoặc lưu nó vào file
from bokeh.models import ColumnDataSource, FactorRange # Câu lệnh này nhập ColumnDataSource, một đối tượng cung cấp dữ liệu cho các glyphs trong Bokeh, và FactorRange, dùng để tạo ra phạm vi cho các biến phân loại (categorical variables) trên trục đồ thị.
from bokeh.transform import factor_cmap #bảng màu
from bokeh.layouts import row #Hàm này cho phép bạn sắp xếp các đối tượng đồ thị (plots) hoặc các widget cạnh nhau theo chiều ngang trong một hàng.
from bokeh.models.tools import HoverTool  #HoverTool được thêm vào để khi di chuột qua các cột, bạn sẽ thấy thông tin chi tiết về cột đó
# Dữ liệu
model = ["Medium", "Tail", "Short"]
sexs = ["Female", "Male"]
factors = [(model, sex) for model in model for sex in sexs ]

counts = [26,13,7,16,12]


source = ColumnDataSource(data=dict(factors=factors, counts=counts))

p = figure(title="HÌNH 2: ĐỒ THỊ GIỚI TÍNH THEO CHIỀU CAO", x_range=FactorRange(*factors),toolbar_location= "right")

p.vbar(x='factors', top='counts', width=0.9, source=source,
       line_color="white",
       fill_color=factor_cmap('factors', palette=["limegreen", "tomato"], factors=sexs, start=1, end=2))

p.add_tools(HoverTool(tooltips=[("model, Sex", "@factors"), ("Count", "@counts")]))

p.y_range.start = 0
p.x_range.range_padding = 0.1 #Khoảng cách giữa đồ thị và trục tung
p.xaxis.major_label_orientation = 1 #độ nghiên của nhãn ở trục x "female và male"

show(p)

df_GENSHIN['WEAPON_TYPE'].value_counts()

from bokeh.plotting import figure, show
from bokeh.models import ColumnDataSource
from bokeh.io import output_notebook
from bokeh.transform import dodge
from bokeh.palettes import Category20

# Dữ liệu từ bài viết của bạn
data = {
    'WEAPON_TYPE': ['Sword', 'Catalyst', 'Bow', 'Claymore', 'Polearm'],
    'COUNTS': [17, 16, 15, 13, 13],
    'COLORS':["pink", "blue", "orange", "green", "lightsalmon"]}

# Tạo ColumnDataSource từ dữ liệu
source = ColumnDataSource(data=data)

# Tạo figure
p = figure(y_range=data['WEAPON_TYPE'], title='Weapon Counts')

# Vẽ biểu đồ HBAR với màu khác nhau cho mỗi cột
p.hbar(y='WEAPON_TYPE', right='COUNTS', height=0.5, source=source, color='COLORS')

# Hiển thị biểu đồ
output_notebook()
show(p)

from math import pi
from bokeh.colors import groups
from bokeh.layouts import row
from bokeh.plotting import figure, show
from bokeh.transform import cumsum

MALE = {'Sword' : 7, 'Claymore':6, 'Bow': 5, 'Catalyst': 5, 'Polearm': 5}

data = pd.Series(MALE).reset_index(name='value').rename(columns={'index': 'WEAPON_TYPE'})
data['angle'] = data['value']/data['value'].sum() * 2*pi
data['color'] = ["pink", "blue", "orange", "green", "lightsalmon"]


p1 = figure(height=350, title="Đồ thị WEAPON các nhân vật MALE", tooltips="@WEAPON_TYPE: @value", x_range=(-0.5, 1.0))

p1.wedge(x=0, y=1, radius=0.4,
        start_angle=cumsum('angle', include_zero=True), end_angle=cumsum('angle'),
        line_color="white", fill_color='color', legend_field='WEAPON_TYPE', source=data)

FEMALE = {'Sword' : 10, 'Claymore':7, 'Bow': 10, 'Catalyst': 11, 'Polearm': 8}

data = pd.Series(FEMALE).reset_index(name='value').rename(columns={'index': 'WEAPON_TYPE'})
data['angle'] = data['value']/data['value'].sum() * 2*pi
data['color'] = ["pink", "blue", "orange", "green", "lightsalmon"]


p2 = figure(height=350, title="Đồ thị WEAPON các nhân vật FEMALE", tooltips="@WEAPON_TYPE: @value", x_range=(-0.5, 1.0))

p2.wedge(x=0, y=1, radius=0.4,
        start_angle=cumsum('angle', include_zero=True), end_angle=cumsum('angle'),
        line_color="white", fill_color='color', legend_field='WEAPON_TYPE', source=data)

p.axis.axis_label = None
p.axis.visible = False
p.grid.grid_line_color = None

show(row(p1, p2))

import plotly.express as px

data=[[3, 1, 4, 5, 0, 1], [1, 2, 4, 4, 0, 1], [0, 4, 2, 3, 0, 2], [1, 3, 1, 3, 0, 2], [0, 2, 3, 2, 0, 0], [2, 2, 2, 2, 1, 2]]
fig = px.imshow(data,
                labels=dict(x="REGION", y="VISION", color="Productivity"),
                x=['Fontaine','Inazuma', 'Liyue','Mondstadt','Snezhnaya', 'Sumeru'],
                y=['Cryo', 'Pyro', 'Electro', 'Anemo', 'Geo', 'Hydro'])

fig.show()

import pandas as pd
import matplotlib.pyplot as plt

# Tạo DataFrame mới lưu trữ tần suất xuất hiện
application_counts = df_GENSHIN['ASCENSION'].value_counts().reset_index(name='Count')

# Đặt tên cột
application_counts.columns = ['ASCENSION', 'Count']

# Tạo biểu đồ Scatter
plt.figure(figsize=(10, 6))
plt.scatter(application_counts['ASCENSION'], application_counts['Count'])

# Thêm nhãn cho trục
plt.xlabel('ASCENSION')
plt.ylabel('Tần suất xuất hiện')

# Thêm tiêu đề cho biểu đồ
plt.title('Biểu đồ Scatter cho biến ASCENSION')

# Xoay nhãn x để dễ đọc hơn
plt.xticks(rotation=60)

# Hiển thị biểu đồ
plt.grid(True)
plt.tight_layout()
plt.show()

"""#**Tính toán HP của nhân vật từ 0_0 đến 90_90 dựa vào HP 90_90 có sẵn**"""

#Thêm các cột HP cho nhân vật từ level 0 đến 80
df_GENSHIN['HP_0_0'] = df_GENSHIN['HP_90_90']/14
df_GENSHIN['HP_20_20'] = df_GENSHIN['HP_90_90']/10
df_GENSHIN['HP_40_40'] = df_GENSHIN['HP_90_90']/6
df_GENSHIN['HP_50_50'] = df_GENSHIN['HP_90_90']/5
df_GENSHIN['HP_60_60'] = df_GENSHIN['HP_90_90']/4
df_GENSHIN['HP_70_70'] = df_GENSHIN['HP_90_90']/3
df_GENSHIN['HP_80_80'] = df_GENSHIN['HP_90_90']/2

df_GENSHIN.head(10)

#Chuyển HP ở level 90 ra cúi hàng
df_GENSHIN.insert(23,"HP_90_90", df_GENSHIN.pop("HP_90_90"))
df_GENSHIN.head(10)

#SAO SÁNH HP, DEF, ATK CỦA CÁC NHÂN VẬT
from bokeh.layouts import column
from bokeh.models.tools import HoverTool
p1 = figure(x_range=df_GENSHIN['CHARACTER-NAME'], height=300, width = 1160, title="HP_90_90 nhân vật")
p1.line(x='CHARACTER-NAME', y='HP_90_90', source=df_GENSHIN, line_width=2, line_color="darkturquoise")
p1.add_tools(HoverTool(tooltips=[("HP_90_90", "@{HP_90_90}")]))


p1.xaxis.major_label_orientation = 1

p2 = figure(x_range=df_GENSHIN['CHARACTER-NAME'], height=300, width = 1160, title="DEF_90_90 nhân vật")
p2.line(x='CHARACTER-NAME', y='DEF_90_90', source=df_GENSHIN, line_width=2, line_color="burlywood")
p2.add_tools(HoverTool(tooltips=[("DEF_90_90", "@{DEF_90_90}")]))

p2.xaxis.major_label_orientation = 1

p3 = figure(x_range=df_GENSHIN['CHARACTER-NAME'], height=300, width = 1160, title="ATK_90_90 nhân vật")
p3.line(x='CHARACTER-NAME', y='ATK_90_90', source=df_GENSHIN, line_width=2, line_color="orangered")
p3.add_tools(HoverTool(tooltips=[("ATK_90_90", "@{ATK_90_90}")]))

p3.xaxis.major_label_orientation = 1
# Hiển thị đồ thị
show(column(p1,p2,p3))

from bokeh.io import output_file, show # dùng để chỉ định tên file HTML mà đồ thị sẽ được lưu vào khi xuất. Hàm show dùng để hiển thị đồ thị trong trình duyệt web hoặc lưu nó vào file
from bokeh.models import ColumnDataSource, FactorRange # Câu lệnh này nhập ColumnDataSource, một đối tượng cung cấp dữ liệu cho các glyphs trong Bokeh, và FactorRange, dùng để tạo ra phạm vi cho các biến phân loại (categorical variables) trên trục đồ thị.
from bokeh.transform import factor_cmap #bảng màu

HP = [("HP_0_0"), ("HP_20_20"), ("HP_40_40"), ("HP_50_50"), ("HP_60_60"), ("HP_70_70"), ("HP_80_80"), ("HP_90_90")]

Amber = [778.5,	1089.9, 1576.8,	1892.2,	2365.3,	3153.7,	4730.5,	9461]
Diluc = [927.2,	1298.1,	2163.5,	2596.2,	3245.3,	4327.0,	6490.5,	12981]

p = figure(title="ĐỒ THỊ HP của Amber (4*) và Diluc (5*)", x_range = FactorRange(*HP),toolbar_location= "right")

p.line(x = HP, y = Amber, legend_label="Amber", color="blue", line_width=2)
p.line(x = HP, y = Diluc, legend_label="Diluc", color="red", line_width=2)

p.y_range.start = 0
p.x_range.range_padding = 0.1 #Khoảng cách giữa đồ thị và trục tung
p.xaxis.major_label_orientation = 1 #độ nghiên của nhãn ở trục x "female và male"

show(p)

from bokeh.layouts import column
from bokeh.models.tools import HoverTool
p1 = figure(x_range=df_GENSHIN['CHARACTER-NAME'], height=300, width = 1160, title="Mức độ sử dụng nhân vật")
p1.line(x='CHARACTER-NAME', y='LEVEL OF USE', source=df_GENSHIN, line_width=2, line_color="aqua")
p1.add_tools(HoverTool(tooltips=[("LEVEL OF USE", "@{LEVEL OF USE}")]))


p1.xaxis.major_label_orientation = 1

p2 = figure(x_range=df_GENSHIN['CHARACTER-NAME'], height=300, width = 1160, title="Mức độ yêu thích nhân vật")
p2.line(x='CHARACTER-NAME', y='LEVEL OF LOVE', source=df_GENSHIN, line_width=2, line_color="brown")
p2.add_tools(HoverTool(tooltips=[("LEVEL OF LOVE", "@{LEVEL OF LOVE}")]))

p2.xaxis.major_label_orientation = 1
# Hiển thị đồ thị
show(column(p1,p2))

df_GENSHIN["Crit dame"] = df_GENSHIN.apply(lambda row: row['ATK_90_90'] * 0.7 if row['ATK_90_90'] > 300 else row['ATK_90_90'] * 0.4, axis=1)
df_GENSHIN["Crit rate"] = df_GENSHIN.apply(lambda row: row['Crit dame']/3 if row['ATK_90_90'] > 300 else row['Crit dame']/2, axis=1)

df_GENSHIN.tail()

#Tải dataframe xuống
df_GENSHIN.to_excel('GENSHIN_08.xlsx', index=False)

from bokeh.layouts import column
from bokeh.models import ColumnDataSource
from bokeh.models.tools import HoverTool

p1 = figure(x_range=df_GENSHIN['CHARACTER-NAME'], height=300, width = 1160, title="Mức sát thương bạo (%)")
p1.line(x='CHARACTER-NAME', y='Crit dame', source=df_GENSHIN, line_width=2, line_color="deepskyblue")
p1.add_tools(HoverTool(tooltips=[("Crit dame", "@{Crit dame}")]))


p1.xaxis.major_label_orientation = 1

p2 = figure(x_range=df_GENSHIN['CHARACTER-NAME'], height=300, width = 1160, title="Mức tỷ lệ bạo (%)")
p2.line(x='CHARACTER-NAME', y='Crit rate', source=df_GENSHIN, line_width=2, line_color="red")
p2.add_tools(HoverTool(tooltips=[("Crit rate", "@{Crit rate}")]))

p2.xaxis.major_label_orientation = 1
# Hiển thị đồ thị
show(column(p1,p2))

url = 'https://docs.google.com/spreadsheets/d/1IGxLeheokwm1-JSavbUUkBUS-Ucrx6Ys/edit?usp=drive_link&ouid=111930618054542411595&rtpof=true&sd=true'
url = 'https://drive.google.com/uc?id=' + url.split('/')[-2]
df_PUNT = pd.read_excel(url)
df_PUNT

import numpy as np
#Nhập tên nhân vật muốn phân tích các phản ứng có thể xảy ra
a = input("Tên Nhân Vật: ")
vision = df_GENSHIN[df_GENSHIN['CHARACTER-NAME']== a]['VISION']
vision = np.array(vision)[0]
print(vision)
#Lọc ra những phản ứng có thể xảy ra
df_c1 = df_PUNT[df_PUNT['VISION']== vision]
df_c2 = df_PUNT[df_PUNT['VISION 2']== vision]
df_c3 = df_PUNT[df_PUNT['VISION 3']== vision]

df_merged = pd.concat([df_c1, df_c2, df_c3], axis=0) #Gộp 3 df trên thành 1
df_merged.drop_duplicates(inplace=True)   #Xóa những dòng trùng lặp
print(df_merged.to_string(index=False, max_cols=10, justify = "center")) #max_cols: Giúp thêm dòng -> ko bị tách bảng, justify: Định dạng nhãn

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

df = df_GENSHIN
df['HP_90_90'] = df_GENSHIN['HP_90_90']/49
df['DEF_90_90'] = df_GENSHIN['DEF_90_90']/3
df['Crit rate'] = df_GENSHIN['Crit rate']*3
df

ten_nhan_vat1 = input("Nhập tên nhân vật thứ nhất: ")
ten_nhan_vat2 = input("Nhập tên nhân vật thứ hai: ")

nhan_vat1 = df[df['CHARACTER-NAME'] == ten_nhan_vat1]
nhan_vat2 = df[df['CHARACTER-NAME'] == ten_nhan_vat2]

if nhan_vat1.empty or nhan_vat2.empty:
    print("Không tìm thấy thông tin cho ít nhất một trong hai nhân vật.")
else:
    # Lựa chọn 5 cột để vẽ đồ thị radar spider
    columns_to_plot = ['HP_90_90', 'ATK_90_90', 'DEF_90_90', 'Crit dame', 'Crit rate']
    nhan_vat1_selected = nhan_vat1[columns_to_plot]
    nhan_vat2_selected = nhan_vat2[columns_to_plot]

    # Tạo đồ thị radar spider cho cả hai nhân vật
    categories = list(nhan_vat1_selected.columns)
    N = len(categories)

    angles = [n / float(N) * 2 * np.pi for n in range(N)]
    angles += angles[:1]

    fig, ax = plt.subplots(figsize=(8, 8), subplot_kw={'polar': True})
    ax.set_xticks(angles[:-1])
    ax.set_xticklabels(categories)
    ax.set_yticklabels([])

    values1 = nhan_vat1_selected.values.flatten().tolist()
    values1 += values1[:1]
    ax.plot(angles, values1, label=ten_nhan_vat1)
    ax.fill(angles, values1, alpha=0.25)

    values2 = nhan_vat2_selected.values.flatten().tolist()
    values2 += values2[:1]
    ax.plot(angles, values2, label=ten_nhan_vat2)
    ax.fill(angles, values2, alpha=0.25)

    plt.legend(loc='upper right')
    plt.title(f"Biểu đồ Radar Spider so sánh chỉ số của {ten_nhan_vat1} và {ten_nhan_vat2}")
    plt.show()